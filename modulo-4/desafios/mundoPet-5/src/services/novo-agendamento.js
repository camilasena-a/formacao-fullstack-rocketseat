import { apiConfig } from './api-config';
import { agendamentoFetchByDay } from './agendamento-fetchByDay';
import dayjs from '../libs/dayjs';

export async function novoAgendamento({id, dataHora, nomeTutor, nomePet, servico}) {
  try {
    console.log("üöÄ Iniciando cria√ß√£o de novo agendamento:", {id, dataHora, nomeTutor, nomePet, servico});
    
    // Valida√ß√µes b√°sicas
    if (!id || !dataHora || !nomeTutor || !nomePet || !servico) {
      throw new Error('Todos os campos s√£o obrigat√≥rios');
    }

    // ‚ö†Ô∏è VALIDA√á√ÉO CR√çTICA: Verificar conflito antes de enviar
    const dataAgendamento = dayjs(dataHora).format('YYYY-MM-DD');
    const horaAgendamento = dayjs(dataHora).format('HH:mm');
    
    console.log("üîç Verificando conflitos finais para:", dataAgendamento, horaAgendamento);
    
    // Busca agendamentos existentes para verifica√ß√£o final
    const agendamentosExistentes = await agendamentoFetchByDay(dataAgendamento);
    
    // Verifica se j√° existe agendamento no mesmo hor√°rio
    const conflito = agendamentosExistentes.find(agendamento => {
      const horaExistente = dayjs(agendamento.dataHora).format("HH:mm");
      const mesmoHorario = horaExistente === horaAgendamento;
      
      if (mesmoHorario) {
        console.log("‚ö†Ô∏è CONFLITO DETECTADO na valida√ß√£o final:", {
          horaConflito: horaExistente,
          petExistente: agendamento.nomePet,
          tutorExistente: agendamento.nomeTutor,
          idExistente: agendamento.id
        });
      }
      
      return mesmoHorario;
    });
    
    if (conflito) {
      const mensagemErro = `Conflito detectado! J√° existe um agendamento para ${horaAgendamento} no dia ${dayjs(dataAgendamento).format('DD/MM/YYYY')} (Pet: ${conflito.nomePet}, Tutor: ${conflito.nomeTutor})`;
      console.error("‚ùå", mensagemErro);
      throw new Error(mensagemErro);
    }

    console.log("‚úÖ Valida√ß√£o final aprovada, enviando para API...");

    // Faz a requisi√ß√£o para enviar os dados do agendamento
    const response = await fetch(`${apiConfig.baseUrl}/agendamentos`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        id, 
        dataHora: dayjs(dataHora).toISOString(), 
        nomeTutor, 
        nomePet, 
        servico
      }),
    });

    if (!response.ok) {
      const errorText = await response.text();
      console.error("‚ùå Erro na resposta da API:", response.status, errorText);
      throw new Error(`Erro do servidor: ${response.status} - ${errorText}`);
    }

    const resultado = await response.json();
    console.log("‚úÖ Agendamento criado com sucesso:", resultado);
    
    // Mostra uma mensagem de sucesso
    console.log(`üéâ Agendamento confirmado: ${nomePet} (${nomeTutor}) - ${dayjs(dataHora).format('DD/MM/YYYY [√†s] HH:mm')} - ${servico}`);
    
    return resultado;
    
  } catch (error) {
    console.error("‚ùå Erro ao criar agendamento:", error.message);
    
    // Se for erro de conflito, relan√ßa para que seja tratado pelo submit
    if (error.message.includes('Conflito detectado')) {
      throw error;
    }
    
    // Para outros erros, mostra mensagem gen√©rica
    throw new Error('Erro ao criar agendamento. Verifique sua conex√£o e tente novamente.');
  }
}