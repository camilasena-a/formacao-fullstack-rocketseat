import { horarioFuncionamento } from "../../utils/hr-funcionamento.js";
import { agendamentoFetchByDay } from "../../services/agendamento-fetchByDay.js";
import dayjs from "../../libs/dayjs.js";

export async function horasLoad (data) {
  const selectHorario = document.querySelector("#appointment-time");
  
  if (!selectHorario) {
    console.error("Elemento #appointment-time n√£o encontrado!");
    return;
  }
  
  console.log("üïê Carregando hor√°rios para:", data);
  
  // Limpa as op√ß√µes existentes, mantendo apenas o placeholder
  selectHorario.innerHTML = '<option value="">Hor√°rio</option>';

  try {
    // Busca agendamentos existentes para a data selecionada
    const agendamentosExistentes = await agendamentoFetchByDay(data);
    console.log("üìã Agendamentos existentes encontrados:", agendamentosExistentes);
    
    // Extrai os hor√°rios j√° ocupados
    const horariosOcupados = agendamentosExistentes.map(agendamento => {
      const horaAgendamento = dayjs(agendamento.dataHora).format("HH:mm");
      console.log("üö´ Hor√°rio ocupado:", horaAgendamento);
      return horaAgendamento;
    });
    
    console.log("‚è∞ Lista de hor√°rios ocupados:", horariosOcupados);

    const verificaDisponivel = horarioFuncionamento.map((horario) => {
      // Constr√≥i a data e hora completa para compara√ß√£o
      const dataHoraCompleta = dayjs(`${data} ${horario}`);

      // Verifica se o hor√°rio √© no futuro (ap√≥s o momento atual)
      const isHoraFutura = dataHoraCompleta.isAfter(dayjs());
      
      // Verifica se o hor√°rio n√£o est√° ocupado
      const isHorarioLivre = !horariosOcupados.includes(horario);
      
      // Hor√°rio est√° dispon√≠vel se for no futuro E n√£o estiver ocupado
      const isHoraDisponivel = isHoraFutura && isHorarioLivre;
      
      const motivoIndisponivel = !isHoraFutura ? "passado" : !isHorarioLivre ? "ocupado" : null;

      console.log(`üîç ${horario}: futuro=${isHoraFutura}, livre=${isHorarioLivre}, dispon√≠vel=${isHoraDisponivel}${motivoIndisponivel ? ` (${motivoIndisponivel})` : ""}`);

      return { horario, disponivel: isHoraDisponivel, motivo: motivoIndisponivel }
    });

    // Organiza os hor√°rios por per√≠odo
    const periodos = {
      manha: verificaDisponivel.filter(({horario}) => {
        const hora = parseInt(horario.split(":")[0]);
        return hora >= 8 && hora < 12;
      }),
      tarde: verificaDisponivel.filter(({horario}) => {
        const hora = parseInt(horario.split(":")[0]);
        return hora >= 12 && hora < 18;
      }),
      noite: verificaDisponivel.filter(({horario}) => {
        const hora = parseInt(horario.split(":")[0]);
        return hora >= 18;
      })
    };

    // Adiciona optgroup para Manh√£
    if (periodos.manha.length > 0) {
      const optgroupManha = document.createElement("optgroup");
      optgroupManha.label = "Manh√£";
      
      periodos.manha.forEach(({horario, disponivel, motivo}) => {
        const option = document.createElement("option");
        option.value = horario;
        
        if (!disponivel) {
          option.disabled = true;
          option.classList.add("disabled");
          // Adiciona indica√ß√£o do motivo da indisponibilidade
          option.textContent = `${horario} ${motivo === "ocupado" ? "(Ocupado)" : "(Indispon√≠vel)"}`;
        } else {
          option.textContent = horario;
        }
        
        optgroupManha.appendChild(option);
      });
      
      selectHorario.appendChild(optgroupManha);
    }

    // Adiciona optgroup para Tarde
    if (periodos.tarde.length > 0) {
      const optgroupTarde = document.createElement("optgroup");
      optgroupTarde.label = "Tarde";
      
      periodos.tarde.forEach(({horario, disponivel, motivo}) => {
        const option = document.createElement("option");
        option.value = horario;
        
        if (!disponivel) {
          option.disabled = true;
          option.classList.add("disabled");
          // Adiciona indica√ß√£o do motivo da indisponibilidade
          option.textContent = `${horario} ${motivo === "ocupado" ? "(Ocupado)" : "(Indispon√≠vel)"}`;
        } else {
          option.textContent = horario;
        }
        
        optgroupTarde.appendChild(option);
      });
      
      selectHorario.appendChild(optgroupTarde);
    }

    // Adiciona optgroup para Noite
    if (periodos.noite.length > 0) {
      const optgroupNoite = document.createElement("optgroup");
      optgroupNoite.label = "Noite";
      
      periodos.noite.forEach(({horario, disponivel, motivo}) => {
        const option = document.createElement("option");
        option.value = horario;
        
        if (!disponivel) {
          option.disabled = true;
          option.classList.add("disabled");
          // Adiciona indica√ß√£o do motivo da indisponibilidade
          option.textContent = `${horario} ${motivo === "ocupado" ? "(Ocupado)" : "(Indispon√≠vel)"}`;
        } else {
          option.textContent = horario;
        }
        
        optgroupNoite.appendChild(option);
      });
      
      selectHorario.appendChild(optgroupNoite);
    }
    
    // Conta quantos hor√°rios est√£o dispon√≠veis
    const totalDisponiveis = verificaDisponivel.filter(({disponivel}) => disponivel).length;
    const totalOcupados = horariosOcupados.length;
    
    console.log(`üìä Resumo: ${totalDisponiveis} hor√°rios dispon√≠veis, ${totalOcupados} ocupados`);
    
    // Se n√£o h√° hor√°rios dispon√≠veis, adiciona uma mensagem
    if (totalDisponiveis === 0) {
      const option = document.createElement("option");
      option.value = "";
      option.textContent = "Nenhum hor√°rio dispon√≠vel";
      option.disabled = true;
      selectHorario.appendChild(option);
      
      console.log("‚ö†Ô∏è Nenhum hor√°rio dispon√≠vel para esta data");
    }
    
  } catch (error) {
    console.error("‚ùå Erro ao carregar hor√°rios:", error);
    
    // Em caso de erro, carrega hor√°rios sem verificar agendamentos
    const verificaDisponivel = horarioFuncionamento.map((horario) => {
      const dataHoraCompleta = dayjs(`${data} ${horario}`);
      const isHoraDisponivel = dataHoraCompleta.isAfter(dayjs());
      return { horario, disponivel: isHoraDisponivel }
    });

    verificaDisponivel.forEach(({horario, disponivel}) => {
      const option = document.createElement("option");
      option.value = horario;
      option.textContent = horario;
      if (!disponivel) {
        option.disabled = true;
        option.classList.add("disabled");
      }
      selectHorario.appendChild(option);
    });
  }
}